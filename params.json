{"name":"Testing","tagline":"Stuff for testing","body":"Some code I use to help me do TDD\r\n\r\n# Generic Builder\r\n\r\n[Builder.cs](https://github.com/MrAntix/Testing/blob/master/antix-testing/Antix.Testing/Builder.cs)\r\n\r\nThis is a generic builder class which separates off the business of creation into a reusable component\r\n\r\n[On NuGet](https://nuget.org/packages/antix-testing)\r\n\r\n### Generic Builder Examples\r\n\r\n    // create a builder for a mocked interface (using Moq)\r\n    var builder = new Builder<IThingy>(Mock.Of<IThingy>)\r\n                    .With(x => \r\n                                {\r\n                                    x.Name = \"Some Name\";\r\n                                    x.SetValue(\"Some Value\");\r\n                                });\r\n \r\n    // create an instance\r\n    var instance = builder.Build();\r\n\r\n    // create an other instance, override the name\r\n    var otherInstance = builder\r\n\t                    .Build(x => x.Name = \"Other Name\");\r\n\r\n    // create 100 instances, then 10 overriding the name, the index is supplied too\r\n    var instances = builder\r\n                        .Build(100)\r\n                        .Build(10, (x, i) => x.Name = \"Other Name\")\r\n\t\t\t\t\t\t.ToList();\r\n\r\n### Notes on Usage\r\n\r\nThe builder implements IEnumerable<T> and is has a lazy iterator, which means everytime \r\nyou enumerate it you will get a new set of objects\r\n\r\nCall .ToArray() or .ToList() to fix a set to a variable (see above)\r\n\r\n# Standard Builders\r\n\r\nThese are some builders to get hold of the usual type of data you may need\r\n\r\n    IBooleanBuilder Boolean { get; }\r\n    IIntegerBuilder Integer { get; }\r\n    IDoubleBuilder Double { get; }\r\n    IDateTimeBuilder DateTime { get; }\r\n    ITextBuilder Text { get; }\r\n\r\n    IPersonBuilder Person { get; }\r\n    IEmailBuilder Email { get; }\r\n    IWebsiteBuilder Website { get; }\r\n\r\n# Extensions\r\n\r\nThere are some simple extensions to IEnumerable<T> to allow you to random elements\r\n\r\n    // Gets a single random element from an IEnumerable<T>\r\n    T OneOf<T>(this IEnumerable<T> items)\r\n\r\n\t// Gets an exact number of random elements from an IEnumerable<T>\r\n\tIEnumerable<T> ManyOf<T>(\r\n            this IEnumerable<T> items, int exactCount)\r\n\t\t\t\r\n\t// Gets a random number of random elements from an IEnumerable<T> given a range\r\n\tIEnumerable<T> ManyOf<T>(\r\n            this IEnumerable<T> items, int minCount, int maxCount)\r\n\r\nAlso some extensions to find embedded resources\r\n\r\n\t// Find an embedded resource as a stream in the passed type assembly by name\r\n    Stream FindResourceStream(this Type type, string name)\r\n\r\n\t// Find an embedded resource and transform from stream to another type\r\n    T FindResource<T>(this Type type, string name, Func<Stream, T> transformer)\r\n\r\n\t// Find an embedded resource and transform to a string\r\n    string FindResourceString(this Type type, string name)\r\n\r\n\t// Find an embedded resource and transform to an image\r\n    Image FindResourceImage(this Type type, string name)\r\n\r\n# Test Data\r\n\r\nThere is also some test data\r\n\r\n    IEnumerable<bool> Booleans { get; }\r\n\r\n    IEnumerable<string> PersonFirstNamesMale { get; }\r\n    IEnumerable<string> PersonFirstNamesFemale { get; }\r\n    IEnumerable<GenderTypes> DataGenders { get; }\r\n    IEnumerable<string> PersonLastNames { get; }\r\n\r\n    IEnumerable<string> WebDomains { get; }\r\n    IEnumerable<string> EmailTypes { get; }\r\n\r\n    IEnumerable<char> Chars { get; }\r\n    IEnumerable<char> Letters { get; }\r\n    IEnumerable<char> Numbers { get; }\r\n\r\nfor example\r\n\r\n    // get a random number of male first names, between 10 and 20\r\n\tvar firstNames = TestData.PersonFirstNamesMale\r\n                        .ManyOf(10,20);\r\n\r\n# Benchmarking\r\n\r\nThis is used to time how long a piece of code takes to run.\r\n\r\nWrap your code in a delegate and call the Benchmark.Run with a number \r\nof iterations or even a list of iteration to get figures for performance\r\nover an increasing number of iterations\r\n\r\n    var result = Benchmark\r\n        .Run(() => [Your Action], [Number of iterations]);\r\n\r\nfor example, run Thread.Sleep 10 times\r\n\r\n    var result = Benchmark\r\n        .Run(() => Thread.Sleep(10), 10);\r\n\r\nfor example, run Thread.Sleep 10 times, 100 times and 1000 times\r\n\r\n    var result = Benchmark\r\n        .Run(() => Thread.Sleep(10), 10, 100, 1000);\r\n\r\nThe result ToString() gives a summary of the timings including the average\r\nand you can format this using config (see app.config in the Testing project)\r\n\r\n    <Testing.Properties.Settings>\r\n        <setting name=\"BenchmarkResult_toString\" serializeAs=\"String\">\r\n            <value>{0}, av {1}, {2}x</value>\r\n        </setting>\r\n        <setting name=\"BenchmarkResultList_toString\" serializeAs=\"String\">\r\n            <value>{0}, av {1}, {2}x</value>\r\n        </setting>\r\n    </Testing.Properties.Settings>\r\n\r\n{0} time\r\n{1} average\r\n{2} iterations","google":"UA-2936095-8","note":"Don't delete this file! It's used internally to help with page regeneration."}